# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - name: Create temp build dir
      tempfile:
        state: directory
        suffix: archiso-build
      register: iso_build_temp_dir
    - set_fact:
        iso_build_dir: "{{ iso_build_temp_dir.path }}"
        # iso_build_dir: "<HARD CODE HERE FOR DEBUGING>"
    - set_fact:
        skel_dir: "{{ iso_build_dir }}/airootfs/etc/skel"
        ansible_dir: "{{ iso_build_dir }}/airootfs/etc/skel/arch-ansible"
        gpg_keys_dir: "{{ iso_build_dir }}/airootfs/etc/skel/arch-ansible/secrets/gpg-keys"
        ssh_keys_dir: "{{ iso_build_dir }}/airootfs/etc/skel/arch-ansible/secrets/ssh-keys"
    - name: Populate temp dir
      synchronize:
        src: /usr/share/archiso/configs/releng/
        dest: "{{ iso_build_dir }}"

    - block:
        - name: Create skel dir
          file:
            path: "{{ skel_dir }}"
            state: directory
        - name: Copy arch-ansible to skel
          synchronize:
            src: "{{ playbook_dir }}/"
            dest: "{{ ansible_dir }}"

        - name: Add ansible package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: ansible

        - name: Add git package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: git

        - name: Add tmux package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: tmux
        - name: Add tmux config to skel
          copy:
            src: files/tmux.conf
            dest: "{{ skel_dir }}/.tmux.conf"

        - name: Add os-prober package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: os-prober

        - name: Create gpg-keys dir
          file:
            path: "{{ gpg_keys_dir }}"
            state: directory

        - name: Export gpg private key
          command: gpg --armor --export-secret-key '{{ pass_gpg_key }}'
          args:
            creates: "{{ gpg_keys_dir }}/private-key.asc"
          register: gpg_private_export_cmd
          no_log: true
        - name: Write gpg private key
          copy:
            dest: "{{ gpg_keys_dir }}/private-key.asc"
            content: "{{ gpg_private_export_cmd.stdout }}"
          no_log: true
          when: gpg_private_export_cmd.changed

        - name: Export gpg public key
          command: gpg --armor --export '{{ pass_gpg_key }}'
          no_log: true
          register: gpg_public_export_cmd
          args:
            creates: "{{ gpg_keys_dir }}/public-key.asc"
        - name: Write gpg public key
          no_log: true
          when: gpg_public_export_cmd.changed
          copy:
            dest: "{{ gpg_keys_dir }}/public-key.asc"
            content: "{{ gpg_public_export_cmd.stdout }}"

        - name: Create ssh-keys dir
          file:
            path: "{{ ssh_keys_dir }}"
            state: directory
        - name: Copy SSH private key
          copy:
            src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
            dest: "{{ ssh_keys_dir }}/id_rsa"
        - name: Copy SSH public key
          copy:
            src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
            dest: "{{ ssh_keys_dir }}/id_rsa.pub"

        - name: Build ISO
          become: true
          command: "mkarchiso -v -w {{ iso_build_dir }}/work -o {{ iso_build_dir }}/out {{ iso_build_dir }}"
          args:
            creates: "{{ iso_build_dir }}/out/*.iso"
            chdir: "{{ iso_build_dir }}"

        - name: Inspect built images
          register: built_images
          find:
            paths: "{{ iso_build_dir }}/out"
            patterns: "*.iso"

        - name: Fail if there isn't exactly one image found
          when: built_images.matched != 1
          fail:
            msg: "Incorrect image file count in {{ iso_build_dir }}/out"

        - name: Write out ISO file
          become: true
          command: "dd bs=4M if={{ item.path }} of={{ iso_output_file }} oflag=sync"
          loop: "{{ built_images.files }}"

      always:
        - name: Cleanup
          become: true
          file:
            path: "{{ iso_build_dir }}"
            state: absent
