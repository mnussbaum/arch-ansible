# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - name: Create temp build dir
      tempfile:
        state: directory
        suffix: archiso-build
      register: iso_build_temp_dir

    - set_fact:
        iso_build_dir: "{{ iso_build_temp_dir.path }}"
        # iso_build_dir: "<HARD CODE HERE FOR DEBUGING>"
    - set_fact:
        root_user_dir: "{{ iso_build_dir }}/airootfs/root"

    - name: Populate temp dir
      synchronize:
        src: /usr/share/archiso/configs/releng/
        dest: "{{ iso_build_dir }}"

    - block:
        - name: Install files into root user dir
          import_tasks: tasks/bootstrapping/install-user-files.yml
          vars:
            dest_dir: "{{ root_user_dir }}"

        - name: Add ansible package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: ansible

        - name: Add git package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: git

        - name: Add tmux package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: tmux

        - name: Add os-prober package
          lineinfile:
            dest: "{{ iso_build_dir }}/packages.x86_64"
            line: os-prober

        - name: Build ISO
          become: true
          command: "mkarchiso -v -w {{ iso_build_dir }}/work -o {{ iso_build_dir }}/out {{ iso_build_dir }}"
          args:
            creates: "{{ iso_build_dir }}/out/*.iso"
            chdir: "{{ iso_build_dir }}"

        - name: Inspect built images
          register: built_images
          find:
            paths: "{{ iso_build_dir }}/out"
            patterns: "*.iso"

        - name: Fail if there isn't exactly one image found
          when: built_images.matched != 1
          fail:
            msg: "Incorrect image file count in {{ iso_build_dir }}/out"

        - name: Write out ISO file
          become: true
          command: "dd bs=4M if={{ item.path }} of={{ iso_output_file }} oflag=sync"
          loop: "{{ built_images.files }}"

      always:
        - name: Cleanup
          become: true
          file:
            path: "{{ iso_build_dir }}"
            state: absent
