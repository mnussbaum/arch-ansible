# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    # Right now needs disk_device and root_dir_mnt as args set to
    # /dev/sda and /mnt respectively
    - name: Set partition facts
      set_fact:
        desired_partitions:
          - number: 1
            partition_device: "{{ disk_device }}1"
            logical_device: "{{ disk_device }}1"
            name: EFI
            start: 0%
            end: 261MiB
            fstype: vfat
            fs_options: ""
            mount_point: "{{ root_dir_mnt }}/boot/efi"
            encrypted: false
            flags:
              - esp
          - number: 2
            partition_device: "{{ disk_device }}2"
            logical_device: "{{ disk_device }}2"
            name: Grub
            start: 261MiB
            end: 773MiB
            fstype: ext4
            fs_options: "-O ^has_journal"
            mount_point: "{{ root_dir_mnt }}/boot"
            encrypted: false
            flags: []
          - number: 3
            partition_device: "{{ disk_device }}3"
            logical_device: "/dev/mapper/vgcrypt-root"
            name: Arch Root
            start: 773MiB
            end: 100%
            fstype: ext4
            fs_options: "-O ^has_journal"
            mount_point: "{{ root_dir_mnt }}"
            encrypted: true
            volume_container_name: lvm
            volume_group_name: vgcrypt
            logical_volume_name: root
            flags: []

    - name: Create partitions
      parted:
        # The gpt label always needs to be set due to
        # https://github.com/ansible/ansible/issues/38594
        label: gpt
        device: "{{ disk_device }}"
        number: "{{ item.number }}"
        state: present
        part_type: primary
        part_start: "{{ item.start }}"
        part_end: "{{ item.end }}"
        unit: MiB
        flags: "{{ item.flags }}"
        name: "{{ item.name }}"
        unit: MiB
      become: true
      loop: "{{ desired_partitions }}"

    - name: LUKS format device and cryptopen it
      luks_device:
        device: "{{ item.partition_device }}"
        state: "opened"
        name: "{{ item.volume_container_name }}"
        keyfile: "luks-keyfile"
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    - name: Create physical volumes and volume groups for encrypted partitions
      lvg:
        vg: "{{ item.volume_group_name }}"
        pvs: "/dev/mapper/{{ item.volume_container_name }}"
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    # This is apparently not idempotent for partition 3
    # claims "Sorry, no shrinking of root to 0 permitted"
    - name: Create logical volumes for encrypted partitions
      lvol:
        vg: "{{ item.volume_group_name }}"
        lv: "{{ item.logical_volume_name }}"
        size: 100%FREE
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    - name: Create partition filesystems
      filesystem:
        fstype: "{{ item.fstype }}"
        dev: "{{ item.logical_device }}"
        opts: "{{ item.fs_options }}"
        force: true
        # Would be nice to add fs labels here set to the name
      become: true
      loop: "{{ desired_partitions }}"

    - name: Mount partitions
      mount:
        fstype: "{{ item.fstype }}"
        src: "{{ item.logical_device }}"
        path: "{{ item.mount_point }}"
        state: mounted
      become: true
      # Reverse the partitions so that the mount order is:
      # 1. /mnt
      # 2. /mnt/boot
      # 3. /mnt/boot/efi
      loop: "{{ desired_partitions | reverse | list }}"

     # Fix hardcoding of lvm, test volume/mounting
     # Next up is network setup, but we can skip that in qemu
     # for now
     # Resume at line 148 of bin/_bootstrap.sh, create file for mirrors
     # Then refresh keys
     # Then pacstrap
     # Then genfstab
     # Then migrate initial-configure-xps into bootstrap tagged ansible tasks
     # Then migrate install gpg and ssh keys to ansible
     # Then migrate copying arch-ansible repo to ansible
     # Then run ansible bootstrap tag via chroot connection plugin ala https://www.reddit.com/r/ansible/comments/8kc59a/how_to_use_the_chroot_connection_plugin/
     #
     # Pull partition definitions into host vars
     # Unify pi boostrapping and qemu/xps bootstrapping
