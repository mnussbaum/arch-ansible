# vim:ft=yaml.ansible:
---
- set_fact:
    gpg_keys_dir: "{{ ansible_dest_dir }}/secrets/gpg-keys"
    ssh_keys_dir: "{{ ansible_dest_dir }}/secrets/ssh-keys"

- name: Copy over arch-ansible repo
  synchronize:
    src: "{{ playbook_dir }}/"
    dest: "{{ ansible_dest_dir }}"

- name: Fix permissions on arch-ansible repo
  file:
    state: directory
    path: "{{ ansible_dest_dir }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    recurse: true

- name: Make arch-ansible bin scripts executable
  file:
    path: "{{ item }}"
    mode: a+x
  with_fileglob:
    - "{{ ansible_dest_dir }}/bin/*"

- name: Add tmux config
  copy:
    src: files/tmux.conf
    dest: "{{ user_home_dir }}/.tmux.conf"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Create gpg-keys dir
  file:
    path: "{{ gpg_keys_dir }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Check for exported GPG private key
  stat:
    path: "{{ gpg_keys_dir }}/private-key.asc"
  register: check_exported_gpg_private_key

- name: Export GPG private key
  # This needs to be user.name and not user_name. This references the local
  # user providing the GPG key, not the name of the user the files are being
  # installed into which might be e.g. "root" for a live USB
  become_user: "{{ user.name }}"
  command: "gpg --armor --export-secret-key '{{ user.pass_gpg_key }}'"
  register: gpg_private_export_cmd
  failed_when: gpg_private_export_cmd.stderr != ""
  no_log: true
  when: not check_exported_gpg_private_key.stat.exists

- name: Write GPG private key
  copy:
    dest: "{{ gpg_keys_dir }}/private-key.asc"
    content: "{{ gpg_private_export_cmd.stdout }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
  no_log: true
  when: gpg_private_export_cmd.changed

- name: Check for exported GPG public key
  stat:
    path: "{{ gpg_keys_dir }}/public-key.asc"
  register: check_exported_gpg_public_key

- name: Export GPG public key
  # This needs to be user.name and not user_name. This references the local
  # user providing the GPG key, not the name of the user the files are being
  # installed into which might be e.g. "root" for a live USB
  become_user: "{{ user.name }}"
  command: "gpg --armor --export '{{ user.pass_gpg_key }}'"
  no_log: true
  register: gpg_public_export_cmd
  failed_when: gpg_public_export_cmd.stderr != ""
  when: not check_exported_gpg_public_key.stat.exists

- name: Write GPG public key
  no_log: true
  when: gpg_public_export_cmd.changed
  copy:
    dest: "{{ gpg_keys_dir }}/public-key.asc"
    content: "{{ gpg_public_export_cmd.stdout }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Create ssh-keys dir
  file:
    path: "{{ ssh_keys_dir }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Copy SSH private key
  no_log: true
  copy:
    src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
    dest: "{{ ssh_keys_dir }}/id_rsa"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Copy SSH public key
  copy:
    src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    dest: "{{ ssh_keys_dir }}/id_rsa.pub"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
