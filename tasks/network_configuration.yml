# vim:ft=yaml.ansible:
---
- name: networking configuration | Create systemd-resolved config directory
  become: true
  file:
    path: "{{ network_install_root }}/etc/systemd/resolved.conf.d"
    state: directory

- name: networking configuration | Configure nameservers
  become: true
  copy:
    src: files/resolved-dns-servers.conf
    dest: "{{ network_install_root }}/etc/systemd/resolved.conf.d/dns_servers.conf"

# This fails in arch-chroot during qemu bootstrapping, since arch-chroot mounts
# /etc/resolv.conf from the host into the chroot. Just skip this setup in the
# chroot and let post-live-env bootstrapping take care of it
- name: networking configuration | Point /etc/resolv.conf at systemd-resolved
  become: true
  file:
    src: /run/systemd/resolve/stub-resolv.conf
    path: "{{ network_install_root }}/etc/resolv.conf"
    force: true
    state: link
  when: ansible_connection != "chroot"

- name: networking configuration | Set defaults if network configuration is empty
  set_fact:
    networking: "{{ networking | default({'networks':[]}) }}"

- name: network configuration | Install wpa-psk script
  become: true
  copy:
    src: files/wpa-psk
    dest: /usr/local/bin/wpa-psk
    mode: a+x

- name: networking configuration | Generate WPA PSKs
  shell: "wpa-psk --iwd '{{ item.ssid }}' '{{ item.psk }}'"
  register: wpa_psk_outputs
  no_log: true
  changed_when: false
  when: item.psk is defined
  loop: "{{ networking.networks }}"

- name: networking configuration | Dictionarize WPA PSK outputs
  set_fact:
    wpa_psks: "{{ wpa_psks | default({}) | combine({item.item.ssid: item.stdout}) }}"
  loop: "{{ wpa_psk_outputs.results }}"
  no_log: true
  when: item is not skipped

- name: networking configuration | Create network config dirs
  become: true
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ network_install_root }}/var/lib/iwd"
    - "{{ network_install_root }}/etc/iwd"
    - "{{ network_install_root }}/etc/wireguard"

- name: networking configuration | Configure iwd networks
  become: true
  template:
    src: templates/iwd_network.conf.j2
    dest: "{{ network_install_root }}/var/lib/iwd/{{ item.ssid }}.{% if item.psk is defined %}psk{% elif item.eap is defined %}8021x{% else %}open{% endif %}"
  no_log: true
  loop: "{{ networking.networks }}"

- name: networking configuration | Install iwd main config
  become: true
  copy:
    src: files/iwd_main.conf
    dest: "{{ network_install_root }}/etc/iwd/main.conf"

- name: networking configuration | Create network-online.target override dir
  become: true
  file:
    path: "{{ network_install_root }}/etc/systemd/system/systemd-networkd-wait-online.service.d"
    state: directory

- name: networking configuration | Install systemd-networkd config for primary interface
  become: true
  template:
    src: templates/systemd-networkd-config.network.j2
    dest: "{{ network_install_root }}/etc/systemd/network/25-{{ networking.interface }}.network"
  when: networking.interface is defined

- name: networking configuration | Install systemd-networkd config for eth0 interface
  become: true
  copy:
    src: files/systemd-networkd-eth0-config.network
    dest: "{{ network_install_root }}/etc/systemd/network/eth0.network"

# This override allows network-online.target to be reached even though eth0
# interfaces are never connected
- name: networking configuration | Configure network-online.target to only wait for a single interface
  become: true
  copy:
    src: files/systemd-networkd-wait-for-only-one-interface.conf
    dest: "{{ network_install_root }}/etc/systemd/system/systemd-networkd-wait-online.service.d/wait-for-only-one-interface.conf"

- name: networking configuration | Install restart-networking script
  become: true
  copy:
    src: files/restart-networking
    dest: "{{ network_install_root }}/usr/local/bin/restart-networking"
    mode: a+x
