# vim:ft=yaml.ansible:
---
# TODO:
# * Ansible LSP show docs in vim
# * Make fzf results unique
- set_fact:
    nvim_config_dir: "{{ user_config_dir }}/nvim"
    nvim_data_dir: "{{ user_data_dir }}/nvim"
    vim_plugins:
      - name: "neoclide/coc.nvim"
        args:
          branch: release
      - name: "christoomey/vim-tmux-runner"
      - name: "fatih/vim-go"
        args:
          do: ":GoInstallBinaries"
      - name: "itchyny/lightline.vim"
      - name: "janko-m/vim-test"
      - name: "jlanzarotta/bufexplorer"
      - name: "junegunn/fzf"
        args:
          dir: "/home/{{ user.name }}/.fzf"
          do: "./install --all"
      - name: "junegunn/fzf.vim"
      - name: "KeitaNakamura/highlighter.nvim"
        args:
          do: ":UpdateRemotePlugins"
      - name: "leshill/vim-json"
      - name: "liuchengxu/vista.vim"
      - name: "Matt-Deacalion/vim-systemd-syntax"
      - name: "m-pilia/vim-ccls"
      - name: "machakann/vim-sandwich"
      - name: "mhinz/vim-startify"
      - name: "pangloss/vim-javascript"
      - name: "pearofducks/ansible-vim"
      - name: "python-mode/python-mode"
        args:
          branch: develop
      - name: "rust-lang/rust.vim"
      - name: "ryanoasis/vim-devicons"
      - name: "scrooloose/nerdtree"
      - name: "Shougo/context_filetype.vim"
      - name: "shmay/vim-yaml"
      - name: "tpope/vim-fugitive"
      - name: "tyru/caw.vim"
      - name: "vim-ruby/vim-ruby"
      - name: "arrufat/vala.vim"
    coc_plugins:
      - name: "clangd/coc-clangd"
        args:
          do: "yarn install --frozen-lockfile"
        languages: [c, cpp]
      - name: "neoclide/coc-tsserver"
        args:
          do: "yarn install --frozen-lockfile"
        languages:
          - javascript
          - typescript
      - name: "neoclide/coc-html"
        args:
          do: "yarn install --frozen-lockfile"
        languages:
          - html
      - name: "neoclide/coc-css"
        args:
          do: "yarn install --frozen-lockfile"
        languages:
          - css
          - scss
      - name: "neoclide/coc-prettier"
        args:
          do: "yarn install --frozen-lockfile"
        languages:
          - graphql
          - markdown
        settings:
          prettier.formatterPriority: -1
          prettier.trailingComma: true
      - name: "neoclide/coc-json"
        args:
          do: "yarn install --frozen-lockfile"
        languages:
          - json
      - name: "neoclide/coc-yaml"
        args:
          do: "yarn install --frozen-lockfile"
        languages: [yaml]
        settings:
          yaml.format.proseWrap: true
          yaml.format.enable: true
      - name: "josa42/coc-go"
        languages: [go]
        args:
          do: "yarn install --frozen-lockfile"
      - name: "fannheyward/coc-pyright"
        args:
          do: "yarn install --frozen-lockfile"
        languages: [python]
        settings:
          python.formatting.provider: black
          python.linting.pylintEnabled: true
      - name: "neoclide/coc-solargraph"
        args:
          do: "yarn install --frozen-lockfile"
        languages: [ruby]
        settings:
          solargraph.diagnostics: true
          solargraph.formatting: true
      - name: "fannheyward/coc-rust-analyzer"
        args:
          do: "yarn install --frozen-lockfile"
        languages: [rust]
        settings:
          rust-analyzer.serverPath: "/usr/bin/rust-analyzer"
  tags: [base16]

- name: nvim | Ensure nvim config and data dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  with_items:
    - "{{ nvim_config_dir }}"
    - "{{ nvim_config_dir }}/plugin"
    - "{{ nvim_data_dir }}"
    - "{{ nvim_data_dir }}/plugged"
    - "{{ nvim_data_dir }}/site/autoload"

- name: nvim | Install neovim packages
  package:
    state: present
    name:
      - ansible-lint
      - clang
      - ctags
      - neovim
      - python-pynvim
      - yaml-language-server-bin
      - vscode-json-languageserver-bin
      - yarn
  become: true

- name: nvim | Download vim-plug installer
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ nvim_data_dir }}/site/autoload/plug.vim"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"

- name: nvim | Install init.vim config
  copy:
    src: nvim/init.vim
    dest: "{{ nvim_config_dir }}/init.vim"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"

- name: nvim | Install coc-settings.json
  template:
    src: templates/nvim/coc-settings.json.j2
    dest: "{{ nvim_config_dir }}/coc-settings.json"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"

- name: nvim | Install vim-plug.vim config
  template:
    src: templates/nvim/vim-plug.vim.j2
    dest: "{{ nvim_config_dir }}/vim-plug.vim"
    group: "{{ user.group }}"
    owner: "{{ user.name }}"
  register: vim_plug_config

- name: nvim | Install nvim plugins
  command: nvim --headless -n -c ":PlugInstall" -c ":qa!"
  when: vim_plug_config.changed

- name: nvim | Install nvim file configs
  synchronize:
    src: files/nvim/plugin/
    dest: "{{ nvim_config_dir }}/plugin"

- name: nvim | Fix permission on nvim configs
  file:
    path: "{{ nvim_config_dir }}/plugin"
    recurse: true
    owner: "{{ user.name }}"
    group: "{{ user.group }}"

- name: nvim | Install nvim template configs
  template:
    src: "{{ item }}"
    dest: "{{ nvim_config_dir }}/plugin/{{ item | basename | replace('.j2', '') }}"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  tags: [base16]
  with_fileglob:
    - templates/nvim/plugin/*

- name: nvim | Generate base16-vim configs
  base16_builder:
    scheme: "{{ base16_scheme }}"
    scheme_family: "{{ base16_scheme_family }}"
    template: vim
    schemes_source: "{{ base16['schemes_source'] }}"
    templates_source: "{{ base16['templates_source'] }}"
  register: base16_vim
  tags: [base16]

- name: nvim | Write base16-vim config to a file
  copy:
    content: "{{ base16_vim['schemes'][base16_scheme]['vim']['colors']['base16-' + base16_scheme + '.vim'] }}"
    dest: "{{ user_config_dir }}/nvim/plugin/base16.vim"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  tags: [base16]

- name: nvim | Generate base16-vim-lightline configs
  base16_builder:
    scheme: "{{ base16_scheme }}"
    scheme_family: "{{ base16_scheme_family }}"
    template: vim-lightline
    schemes_source: "{{ base16['schemes_source'] }}"
    templates_source: "{{ base16['templates_source'] }}"
  register: base16_vim
  tags: [base16]

- name: nvim | Write base16-vim-lightline config to a file
  copy:
    content: "{{ base16_vim['schemes'][base16_scheme]['vim-lightline']['autoload/lightline/colorscheme']['base16-' + base16_scheme + '.vim'] }}"
    dest: "{{ user_config_dir }}/nvim/plugin/base16-lightline.vim"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  tags: [base16]
