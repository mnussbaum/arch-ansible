# vim:ft=yaml.ansible:
---
- name: Networking | Install packages
  become: true
  package:
    state: latest
    name:
      - wireless_tools
      - iwd
      - wpa-psk

- name: Networking | Create systemd-resolved config directory
  become: true
  file:
    path: /etc/systemd/resolved.conf.d
    state: directory

- name: Networking | Configure nameservers
  become: true
  copy:
    src: files/resolved-dns-servers.conf
    dest: /etc/systemd/resolved.conf.d/dns_servers.conf

# This fails in arch-chroot during qemu bootstrapping, since arch-chroot mounts
# /etc/resolv.conf from the host into the chroot. Just skip this setup in the
# chroot and let post-live-env bootstrapping take care of it
- name: Networking | Point /etc/resolv.conf at systemd-resolved
  become: true
  file:
    src: /run/systemd/resolve/stub-resolv.conf
    path: /etc/resolv.conf
    force: true
    state: link
  when: ansible_connection != "chroot"

- name: Networking | Start and enable systemd-resolved
  become: true
  systemd:
    state: started
    enabled: true
    name: systemd-resolved.service

- debug:
    msg: "Skipping iwd configuration since no network config is defined"
  when: networking is not defined

- name: Networking | Generate WPA PSKs
  shell: "wpa-psk --iwd '{{ item.ssid }}' '{{ item.psk }}'"
  register: wpa_psk_outputs
  no_log: true
  changed_when: false
  when: networking is defined and item.psk is defined
  loop: "{{ networking.networks }}"

- name: Networking | Dictionarize WPA PSK outputs
  set_fact:
    wpa_psks: "{{ wpa_psks | default({}) | combine({item.item.ssid: item.stdout}) }}"
  loop: "{{ wpa_psk_outputs.results }}"
  no_log: true
  when: item is not skipped

- name: Networking | Create iwd config dir
  become: true
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /var/lib/iwd
    - /etc/iwd

- name: Networking | Configure iwd networks
  become: true
  template:
    src: templates/iwd_network.conf.j2
    dest: "/var/lib/iwd/{{ item.ssid }}.{% if item.psk is defined %}psk{% elif item.eap is defined %}8021x{% else %}open{% endif %}"
  when: networking is defined
  no_log: true
  loop: "{{ networking.networks }}"

- name: Networking | Install iwd main config
  become: true
  copy:
    src: files/iwd_main.conf
    dest: /etc/iwd/main.conf

# Bootstrapping the pi SD card network is defined but we can't start it up in
# the container, hence the ternary
- name: Networking | Start and enable iwd.service
  become: true
  systemd:
    state: "{{ (ansible_virtualization_role == 'guest') | ternary('stopped', 'started') }}"
    enabled: true
    name: "iwd.service"
  when: networking is defined


- name: Networking | Create network-online.target override dir
  become: true
  file:
    path: /etc/systemd/system/systemd-networkd-wait-online.service.d
    state: directory

- name: Networking | Install systemd-networkd config for wifi interface
  become: true
  template:
    src: templates/systemd-networkd-wifi-config.network.j2
    dest: /etc/systemd/network/25-{{ networking.wireless_interface }}.network
  when: networking is defined

- name: Networking | Install systemd-networkd config for eth0 interface
  become: true
  copy:
    src: files/systemd-networkd-eth0-config.network
    dest: /etc/systemd/network/eth0.network

# This override allows network-online.target to be reached even though eth0
# interfaces are never connected
- name: Networking | Configure network-online.target to only wait for a single interface
  become: true
  copy:
    src: files/systemd-networkd-wait-for-only-one-interface.conf
    dest: /etc/systemd/system/systemd-networkd-wait-online.service.d/wait-for-only-one-interface.conf

- name: Networking | Start and enable systemd-networkd
  become: true
  systemd:
    state: started
    enabled: true
    name: systemd-networkd.service
    daemon-reload: true

- name: Networking | Install restart-networking script
  become: true
  template:
    src: templates/restart-networking
    dest: /usr/local/bin/restart-networking
    mode: a+x
  when: networking is defined

- name: Networking | Wait for network to be online during bootstrapping
  become: true
  systemd:
    state: started
    enabled: true
    name: systemd-networkd-wait-online.service
  when: bootstrap is defined and bootstrap == "true"
