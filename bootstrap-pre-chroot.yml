# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - import_tasks: tasks/bootstrapping/create-partitions.yml
    - import_tasks: tasks/bootstrapping/luks-format-and-open.yml
      tags: [rebuild-boot-parition, mount-partitions]

    - name: Create physical volumes and volume groups for encrypted partitions
      lvg:
        vg: "{{ item.volume_group_name }}"
        pvs: "/dev/mapper/{{ item.volume_group_name }}"
      become: true
      loop: "{{ partitions | dict_values }}"
      when: item.encrypted

    # This is apparently not idempotent for partition 3
    # claims "Sorry, no shrinking of root to 0 permitted"
    - name: Create logical volumes for encrypted partitions
      lvol:
        vg: "{{ item.volume_group_name }}"
        lv: "{{ item.logical_volume_name }}"
        size: 100%VG
        shrink: false
      become: true
      loop: "{{ partitions | dict_values }}"
      when: item.encrypted

    # This is primarily useful for rebuilding and mounting the boot partition,
    # but shouldn't hurt initial bootstrapping
    - name: Activate logical volumes for encrypted partitions
      lvol:
        vg: "{{ item.volume_group_name }}"
        lv: "{{ item.logical_volume_name }}"
        active: true
      become: true
      loop: "{{ partitions | dict_values }}"
      when: item.encrypted
      tags: [rebuild-boot-parition, mount-partitions]

    - import_tasks: tasks/bootstrapping/create-partition-filesystems.yml

    - import_tasks: tasks/bootstrapping/mount-partitions.yml
      tags: [rebuild-boot-parition, mount-partitions]

    - name: Install pacman mirrorlist
      copy:
        src: files/pacman_bootstrap_mirrorlist
        dest: /etc/pacman.d/mirrorlist

    - import_tasks: tasks/bootstrapping/generate-wpa-supplicant-conf.yml
      vars:
        dest_root_dirs:
          - "/"
          - "{{ partitions['root'].mount_point }}"

    - name: Check for network connectivity
      uri:
        url: https://www.google.com
      register: network_check
      ignore_errors: true

    - name: Enable the wireless card
      command: "ip link set dev  {{ network.wireless_card }} up"
      when: network_check is failed

    - name: Enable wpa_supplicant
      command: "wpa_supplicant -B -i  {{ network.wireless_card }} -c /etc/wpa_supplicant/{{ network.ssid }}.conf"
      when: network_check is failed

    - name: Enable wpa_supplicant
      command: "dhcpcd  {{ network.wireless_card }}"
      when: network_check is failed

    - name: Pacstrap
      command: "pacstrap {{ partitions['root'].mount_point }} base linux linux-firmware linux-headers python"
      become: true

    - name: Generate fstab contents with mounts
      command: "genfstab -U -p {{ partitions['root'].mount_point }}"
      register: genfstab_result

    - name: Write fstab file in chroot
      copy:
        content: "{{ genfstab_result.stdout }}"
        dest: "{{ partitions['root'].mount_point }}/etc/fstab"
      become: true

    # There's something weird going on where hostnamectl
    # in the chroot doesn't modify the /etc/hostname
    # file in the chroot, so the new hostname isn't
    # persisted
    - name: Set hostname in chroot
      command: "arch-chroot {{ partitions['root'].mount_point }} hostnamectl set-hostname {{ new_hostname}}"
    - name: Set hostname file in chroot
      command: "arch-chroot {{ partitions['root'].mount_point }} sh -c 'echo -n {{ new_hostname}} > /etc/hostname'"
