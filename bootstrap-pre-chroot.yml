# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - name: Create partitions
      parted:
        # The gpt label always needs to be set due to
        # https://github.com/ansible/ansible/issues/38594
        label: gpt
        device: "{{ item.physical_device }}"
        number: "{{ item.number }}"
        state: present
        part_type: primary
        part_start: "{{ item.start }}"
        part_end: "{{ item.end }}"
        unit: MiB
        flags: "{{ item.flags }}"
        name: "{{ item.name }}"
      become: true
      loop: "{{ desired_partitions }}"

    - name: LUKS format device and cryptopen it
      luks_device:
        device: "{{ item.partition_device }}"
        state: "opened"
        name: "{{ item.volume_container_name }}"
        keyfile: secrets/luks-keyfile
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    - name: Create physical volumes and volume groups for encrypted partitions
      lvg:
        vg: "{{ item.volume_group_name }}"
        pvs: "/dev/mapper/{{ item.volume_container_name }}"
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    # This is apparently not idempotent for partition 3
    # claims "Sorry, no shrinking of root to 0 permitted"
    - name: Create logical volumes for encrypted partitions
      lvol:
        vg: "{{ item.volume_group_name }}"
        lv: "{{ item.logical_volume_name }}"
        size: 100%VG
        shrink: false
      become: true
      loop: "{{ desired_partitions }}"
      when: item.encrypted

    - name: Create partition filesystems
      filesystem:
        fstype: "{{ item.fstype }}"
        dev: "{{ item.logical_device }}"
        opts: "{{ item.fs_options }}"
        force: true
        # Would be nice to add fs labels here set to the name
      become: true
      loop: "{{ desired_partitions }}"
      ignore_errors: true # Ignoring errors since to make it "idempotent"

    - name: Mount partitions
      mount:
        fstype: "{{ item.fstype }}"
        src: "{{ item.logical_device }}"
        path: "{{ item.mount_point }}"
        state: mounted
      become: true
      # Reverse the partitions so that the mount order is:
      # 1. /mnt
      # 2. /mnt/boot
      # 3. /mnt/boot/efi
      loop: "{{ desired_partitions | reverse | list }}"

    - name: Install pacman mirrorlist
      copy:
        src: files/pacman_bootstrap_mirrorlist
        dest: /etc/pacman.d/mirrorlist

    - name: Check for network connectivity
      uri:
        url: https://www.google.com
      register: network_check
      ignore_errors: true

    - name: Generate WPA PSK
      command: "wpa_passphrase {{ network.ssid }} {{ lookup('file', 'secrets/wifi_passphrase') }}"
      register: wpa_passphrase_result
      changed_when: false
      when: network_check is failed

    - name: Install wpa_supplicant config locally
      template:
        src: templates/wpa_supplicant.conf.j2
        dest: "/etc/wpa_supplicant/{{ network.ssid }}.conf"
      when: network_check is failed

    - name: Install wpa_supplicant config into the chroot
      template:
        src: templates/wpa_supplicant.conf.j2
        dest: "{{ root_dir_mnt }}/etc/wpa_supplicant/{{ network.ssid }}.conf"
      when: network_check is failed

    - name: Enable the wireless card
      command: "ip link set dev  {{ network.wireless_card }} up"
      when: network_check is failed

    - name: Enable wpa_supplicant
      command: "wpa_supplicant -B -i  {{ network.wireless_card }} -c /etc/wpa_supplicant/{{ network.ssid }}.conf"
      when: network_check is failed

    - name: Enable wpa_supplicant
      command: "dhcpcd  {{ network.wireless_card }}"
      when: network_check is failed

    - name: Pacstrap
      command: "pacstrap {{ root_dir_mnt }} base linux linux-firmware linux-headers python"
      become: true

    - name: Generate fstab contents with mounts
      command: "genfstab -U -p {{ root_dir_mnt }}"
      register: genfstab_result

    - name: Write fstab file in chroot
      copy:
        content: "{{ genfstab_result.stdout }}"
        dest: "{{ root_dir_mnt }}/etc/fstab"
      become: true

    # There's something weird going on where hostnamectl
    # in the chroot doesn't modify the /etc/hostname
    # file in the chroot, so the new hostname isn't
    # persisted
    - name: Set hostname in chroot
      command: "arch-chroot {{ root_dir_mnt }} hostnamectl set-hostname {{ new_hostname}}"
    - name: Set hostname file in chroot
      command: "arch-chroot {{ root_dir_mnt }} sh -c 'echo -n {{ new_hostname}} > /etc/hostname'"
# TODO: Configure wpa_supplicant wifi stuff
