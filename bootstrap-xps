#! /bin/bash

set -o errexit
set -o nounset

partition_for() {
  local name=$1
  local disk=$2

  number=$(parted "$disk" print | grep "$name" | tr -s " " | cut -d " " -f 2)
  echo "${disk}p${number}"
}

start_wpa_wifi() {
  local wireless_card=$1
  local ssid="$2"
  local wifi_passphrase="$3"

  ip link set dev $wireless_card up
  wpa_supplicant -B -i $wireless_card -c <(wpa_passphrase "$ssid" "$wifi_passphrase")
  dhcpcd $wireless_card
}

network_down() {
  if ! curl --silent --fail --output /dev/null google.com ; then
    return 0
  fi

  return 1
}

setup_network() {
  if network_down ; then
    read -s -p "WPA passphrase:" wifi_passphrase
    start_wpa_wifi $wireless_card "$ssid" "$wifi_passphrase"
  fi

  if network_down ; then
    >&2 echo "No internet. If over wifi probably use wpa_passphrase, wpa_supplicant and dhcpd"
    exit 1
  fi
}

create_boot_partition() {
  local boot_device=$1
  local efi_partition=$2

  # TODO: Zero out the partition
  # dd if=/dev/zero of=$boot_device bs=16M

  mkfs.ext4 -O ^has_journal -L grub $boot_device
  mkdir -p /mnt/boot
  mount $boot_device /mnt/boot
  mkdir -p /mnt/boot/efi
  mount $efi_partition /mnt/boot/efi
}

create_encrypted_root_partition() {
  local root_device=$1
  local ssd_device=$2

  cryptsetup -v --cipher aes-xts-plain64 --hash sha512 --key-size 512 -y luksFormat $ssd_device
  cryptsetup luksOpen $ssd_device lvm

  # TODO: Zero out the partition
  # dd if=/dev/zero of=/dev/mapper/lvm bs=16M

  pvcreate /dev/mapper/lvm
  vgcreate vgcrypt /dev/mapper/lvm

  # TODO: vgcrypt and root values for args need to be passed in, correspond with
  # current $root_device arg
  lvcreate --extents +100%FREE -n root vgcrypt

  mkfs.ext4 -O ^has_journal -b 4096 -L root $root_device
  mount $root_device /mnt
}

ansible_bootstrap() {
  local root_device=$1
  local ssd_device=$2

  cp -r . /mnt/root/arch-ansible

  # Fix lvm daemon socket to speed up Grub, fixed in arch-install-scripts 21-1
  mkdir /mnt/hostlvm
  mount --bind /run/lvm /mnt/hostlvm

  arch-chroot /mnt /root/arch-ansible/initial-configure-xps $hostname $username
  arch-chroot /mnt sh -c "ln -s /hostlvm /run/lvm && cd /root/arch-ansible && ./provision-xps \
    $root_device $ssd_device -e bootstrap='true' --tags bootstrap"
  cp -r . /mnt/home/$username/src/arch-ansible
  arch-chroot /mnt chown -R $username:$username /home/$username/src/arch-ansible
  cp -r gpg-keys /mnt/home/$username/gpg-keys
  arch-chroot /mnt chown -R $username:$username /home/$username/gpg-keys
  arch-chroot /mnt chmod -R 0600 /home/$username/gpg-keys/*
  arch-chroot /mnt mkdir /home/$username/.ssh
  cp -r ssh-keys/* /mnt/home/$username/.ssh
  arch-chroot /mnt chown -R $username:$username /home/$username/.ssh
  arch-chroot /mnt chmod -R 0600 /home/$username/.ssh/*
}

# cp -r /run/archiso/bootmnt/arch-ansible .
# parted --align optimal /dev/nvme0n1
# > mkpart primary ext4 END_OF_A_PART (81174MB) END_OF_A_PART+512MB (81686MB)
# > name 7 "Grub"
# > mkpart primary ext4 END_OF_A_PART+512MB (81686MB) BEGINNING_OF_NEXT_PART_OR_EOF (499984MB)
# > name 8 "Arch Root"

disk="/dev/nvme0n1"
boot_device=$(partition_for "Grub" $disk)
root_device="/dev/mapper/vgcrypt-root"
ssd_device=$(partition_for "Arch Root" $disk)
efi_partition=$(partition_for "EFI" $disk)

hostname="fred"
username="mnussbaum"

wireless_card="wlp60s0"
ssid="BAM"

setup_network
mkdir -p /mnt
create_encrypted_root_partition $root_device $ssd_device
create_boot_partition $boot_device $efi_partition
cat <<'LIST' > /etc/pacman.d/mirrorlist
Server = https://mirrors.kernel.org/archlinux/$repo/os/$arch
Server = https://mirrors.ocf.berkeley.edu/archlinux/$repo/os/$arch
Server = https://mirror.grig.io/archlinux/$repo/os/$arch
LIST
pacman-key --refresh-keys
pacstrap /mnt base base-devel
genfstab -U -p /mnt >> /mnt/etc/fstab
ansible_bootstrap $root_device $ssd_device

# After rebooting:
# sudo systemctl start NetworkManager
# nmtui
# sudo cp -r /root/arch-ansible ~/src
# cd arch-ansible
# ./provision-xps # This should succeed to the point of secret setup
# gpg --import ~/gpg-keys/private-key.asc
# gpg --import ~/gpg-keys/public-key.asc
# rm -rf ~/gpg-keys
# shutdown -r now # Amongst other reaons this activates gpg-agent
# ssh-add  # Adds SSH key to gpg-agent
# ./provision-xps

# TODO
# * Copy network setup into chroot
# * Automate partitioning
