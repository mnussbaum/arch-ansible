#!/usr/bin/env python

import os
import re
import socket
import subprocess
import sys


def _appearance():
    print("Getting period from redshift")
    redshift_print_result = subprocess.run(
        ["redshift", "-p"], check=True, capture_output=True, encoding="utf-8"
    )

    # String looks like one of the following:
    #  * Period: Daytime
    #  * Period: Night
    #  * Period: Transition (2.05% day)
    #  * Period: None
    period_match = re.search(
        r"Period: ([a-zA-Z]+)( \((.*)% .*\))*", redshift_print_result.stdout
    )
    if period_match is None:
        raise RuntimeError(
            "No period found in redshift print output: {}".format(
                redshift_print_result.stdout
            )
        )

    if period_match.group(1) == "None":
        return None

    if period_match.group(1) != "Transition":
        return period_match.group(1).lower()

    percent_daytime = float(period_match.group(3))
    if percent_daytime >= 50:
        return "daytime"
    else:
        return "night"


def _reload_wayland():
    for service in ["waybar.service", "waybar-sway-workspace-output-manager.service"]:
        subprocess.run(["systemctl", "--user", "restart", service], check=True)

    subprocess.run(["swaymsg", "reload"])


def _reload_xorg():
    subprocess.run(["systemctl", "--user", "restart", "feh.service"], check=True)
    subprocess.run(["i3-msg", "reload"])


def main():
    appearance = _appearance()
    if appearance is None:
        return

    print("Running ansible with appearance: {}".format(appearance))
    arch_ansible_path = os.path.join(os.path.expanduser("~"), "src", "arch-ansible")
    ansible_result = subprocess.run(
        [
            "nice",
            "ansible-playbook",
            os.path.join(arch_ansible_path, "playbook.yml"),
            "--verbose",
            "--inventory",
            os.path.join(arch_ansible_path, "hosts.yml"),
            "--limit",
            socket.gethostname(),
            "--tags",
            "base16",
            "--extra-vars",
            "=".join(["appearance", appearance]),
        ],
        capture_output=True,
        cwd=arch_ansible_path,
        encoding="utf-8",
    )

    if ansible_result.returncode != 0:
        print("Ansible run failed: {}".format(ansible_result.stderr))
        sys.exit(ansible_result.returncode)

    if "changed=0" in ansible_result.stdout:
        print("No change from ansible run, exiting")
        return

    print("Running reloads")
    # TODO: Reload running tmuxen
    # TODO: Realod running nvims
    if os.environ["XDG_SESSION_TYPE"] == "wayland":
        _reload_wayland()
    else:
        _reload_xorg()


if __name__ == "__main__":
    main()
