# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - block:
        - name: Read SD card device info
          parted:
            device: "{{ sd_device }}"
            unit: MiB
          register: sd_device_info
          become: true
        - name: Remove extra partitions from disk
          parted:
            device: "{{ sd_device }}"
            number: "{{ item.num }}"
            state: absent
          loop: "{{ sd_device_info.partitions }}"
          when: item.num > 2 or (wipe_card is defined and wipe_card == "true")
          become: true

        - name: Create boot partition
          parted:
            device: "{{ sd_device }}"
            number: 1
            state: present
            part_type: primary
            part_end: 100MiB
          become: true

        - name: Create boot filesystem
          filesystem:
            fstype: vfat
            dev: "{{ sd_device }}p1"
          become: true

        - name: Create temp boot dir mount point
          tempfile:
            state: directory
            suffix: arch-pi-boot
          register: arch_pi_boot_temp_dir
          when: boot_dir_mnt is not defined

        - name: Set boot_dir_mnt
          set_fact:
            boot_dir_mnt: "{{ arch_pi_boot_temp_dir.path }}"
          when: boot_dir_mnt is not defined

        - name: Mount boot filesystem
          mount:
            fstype: vfat
            src: "{{ sd_device }}p1"
            path: "{{ boot_dir_mnt }}"
            state: mounted
          become: true

        - name: Create root partition
          parted:
            device: "{{ sd_device }}"
            number: 2
            state: present
            part_type: primary
            part_start: 100MiB
          become: true

        - name: Create root filesystem
          filesystem:
            fstype: ext4
            dev: "{{ sd_device }}p2"
          become: true

        - name: Create temp root dir mount point
          tempfile:
            state: directory
            suffix: arch-pi-root
          register: arch_pi_root_temp_dir
          when: root_dir_mnt is not defined

        - name: Set root_dir_mnt
          set_fact:
            root_dir_mnt: "{{ arch_pi_root_temp_dir.path }}"
          when: root_dir_mnt is not defined

        - name: Mount root filesystem
          mount:
            fstype: ext4
            src: "{{ sd_device }}p2"
            path: "{{ root_dir_mnt }}"
            state: mounted
          become: true

        - name: Check if root filesystem downloaded
          find:
            paths: "{{ root_dir_mnt }}"
            file_type: directory
            patterns: "*"
          register: root_filesystem_files

        - name: Download and extract root filesystem
          unarchive:
            src: http://archlinuxarm.org/os/ArchLinuxARM-rpi-3-latest.tar.gz
            remote_src: true
            dest: "{{ root_dir_mnt }}"
          become: true
          when: root_filesystem_files.matched | int == 0

        - name: Copy boot files to boot partition
          copy:
            src: "{{ root_dir_mnt }}/boot/"
            dest: "{{ boot_dir_mnt }}"
          become: true

        - name: Set ansible and key dirs
          set_fact:
            alarm_home_dir: "{{ root_dir_mnt }}/home/alarm"

        - name: Set ansible and key dirs
          set_fact:
            ansible_dir: "{{ alarm_home_dir }}/arch-ansible"
            gpg_keys_dir: "{{ alarm_home_dir }}/arch-ansible/gpg-keys"
            ssh_keys_dir: "{{ alarm_home_dir }}/arch-ansible/ssh-keys"

        - name: Copy arch-ansible to root
          become: true
          synchronize:
            src: "{{ playbook_dir }}/"
            dest: "{{ ansible_dir }}"

        - name: Add tmux config to root
          become: true
          copy:
            src: files/tmux.conf
            dest: "{{ alarm_home_dir }}/.tmux.conf"

        - name: Create gpg-keys dir
          become: true
          file:
            path: "{{ gpg_keys_dir }}"
            state: directory

        - name: Export gpg private key
          command: gpg --armor --export-secret-key '{{ pass_gpg_key }}'
          args:
            creates: "{{ gpg_keys_dir }}/private-key.asc"
          register: gpg_private_export_cmd
          no_log: true
        - name: Write gpg private key
          copy:
            dest: "{{ gpg_keys_dir }}/private-key.asc"
            content: "{{ gpg_private_export_cmd.stdout }}"
          become: true
          no_log: true
          when: gpg_private_export_cmd.changed

        - name: Export gpg public key
          command: gpg --armor --export '{{ pass_gpg_key }}'
          no_log: true
          register: gpg_public_export_cmd
          args:
            creates: "{{ gpg_keys_dir }}/public-key.asc"
        - name: Write gpg public key
          become: true
          no_log: true
          when: gpg_public_export_cmd.changed
          copy:
            dest: "{{ gpg_keys_dir }}/public-key.asc"
            content: "{{ gpg_public_export_cmd.stdout }}"

        - name: Create ssh-keys dir
          become: true
          file:
            path: "{{ ssh_keys_dir }}"
            state: directory
        - name: Copy SSH private key
          become: true
          copy:
            src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
            dest: "{{ ssh_keys_dir }}/id_rsa"
            owner: root
        - name: Copy SSH public key
          become: true
          copy:
            src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
            dest: "{{ ssh_keys_dir }}/id_rsa.pub"

      always:
        - name: Unmount temp boot dir
          mount:
            path: "{{ arch_pi_boot_temp_dir.path }}"
            state: unmounted
          when: arch_pi_boot_temp_dir is defined and arch_pi_boot_temp_dir.skipped is not defined
          become: true

        - name: Remove temp boot dir mount point
          when: arch_pi_boot_temp_dir is defined and arch_pi_boot_temp_dir.skipped is not defined
          file:
            path: "{{ arch_pi_boot_temp_dir.path }}"
            state: absent

        - name: Unmount temp root dir
          mount:
            path: "{{ arch_pi_root_temp_dir.path }}"
            state: unmounted
          when: arch_pi_root_temp_dir is defined and arch_pi_root_temp_dir.skipped is not defined
          become: true

        - name: Remove temp root dir mount point
          when: arch_pi_root_temp_dir is defined and arch_pi_root_temp_dir.skipped is not defined
          file:
            path: "{{ arch_pi_root_temp_dir.path }}"
            state: absent
    # # Next comes the booted or maybe QEMU setup
