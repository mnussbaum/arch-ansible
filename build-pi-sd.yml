# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - name: Wipe mount points
      file:
        path: "{{ item.mount_point }}"
        state: absent
      become: true
      when: wipe_card is defined and wipe_card == "true"
      loop: "{{ desired_partitions | dict_values }}"

    - name: Create mount points
      file:
        path: "{{ item.mount_point }}"
        state: directory
      become: true
      loop: "{{ desired_partitions | dict_values }}"

    - assert:
        that: "desired_partitions['boot'].physical_device == desired_partitions['root'].physical_device"
        msg: "Boot and root partitions must be on the same SD card"

    - name: Set partition facts
      set_fact:
        alarm_home_dir: "{{ desired_partitions['root'].mount_point }}/home/alarm"
        root_filesystem_download_path: "{{ lookup('env', 'HOME') }}/.cache/ArchLinuxARM-rpi-2-latest.tar.gz"
    - name: Set secondary facts
      set_fact:
        ansible_dir: "{{ alarm_home_dir }}/arch-ansible"
        gpg_keys_dir: "{{ alarm_home_dir }}/arch-ansible/secrets/gpg-keys"
        ssh_keys_dir: "{{ alarm_home_dir }}/arch-ansible/secrets/ssh-keys"

    - name: Read SD card device info
      parted:
        device: "{{ desired_partitions['root'].physical_device }}"
        unit: MiB
      register: sd_device_info
      become: true

    - name: Remove extra partitions from disk
      parted:
        device: "{{ desired_partitions['root'].physical_device }}"
        number: "{{ item.num }}"
        state: absent
      loop: "{{ sd_device_info.partitions }}"
      when: (item.num > (desired_partitions | length)) or (wipe_card is defined and wipe_card == "true")
      become: true

    - import_tasks: tasks/bootstrapping/create_partitions.yml

    - name: Wipe exising LUKS partitions
      luks_device:
        device: "{{ item.partition_device }}"
        state: "absent"
        name: "{{ item.logical_device | basename }}"
      become: true
      loop: "{{ desired_partitions | dict_values }}"
      when: item.encrypted and (wipe_card is defined and wipe_card == "true")

    - block:
      - import_tasks: tasks/bootstrapping/luks_format_and_open.yml

      - name: Create partition filesystems
        filesystem:
          fstype: "{{ item.fstype }}"
          dev: "{{ item.logical_device }}"
        become: true
        loop: "{{ desired_partitions | dict_values }}"

      - import_tasks: tasks/bootstrapping/mount_partitions.yml

      - name: Check for root filesystem download
        stat:
          path: "{{ root_filesystem_download_path }}"
        register: root_filesystem_download_check_result

      - name: Download root filesystem
        get_url:
          url: http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz
          dest: "{{ root_filesystem_download_path }}"
        when: not root_filesystem_download_check_result.stat.exists

      - name: Extract root filesystem
        unarchive:
          src: "{{ root_filesystem_download_path }}"
          dest: "{{ desired_partitions['root'].mount_point }}"
          creates: "{{ desired_partitions['root'].mount_point}}/etc/os-release"
        become: true

      - name: Move boot files to boot partition
        synchronize:
          src: "{{ desired_partitions['root'].mount_point }}/boot/"
          dest: "{{ desired_partitions['boot'].mount_point }}"
        become: true

      - name: List old boot dir files to delete
        become: true
        find:
          paths: "{{ desired_partitions['root'].mount_point }}/boot/"
          patterns: "*"
          hidden: true
          recurse: true
          file_type: any
        register: boot_dir_contents

      - name: Remove old boot dir files
        become: true
        file:
          path: "{{ item.path }}"
          state: absent
        with_items: "{{ boot_dir_contents.files }}"

      - name: Unmount boot dir
        mount:
          path: "{{ desired_partitions['boot'].mount_point }}"
          state: absent
        become: true

      - name: Mount boot dir under root dir
        mount:
          path: "{{ desired_partitions['root'].mount_point }}/boot"
          src: "{{ desired_partitions['boot'].partition_device }}"
          state: mounted
          fstype: vfat
        become: true

      - import_tasks: tasks/bootstrapping/generate_wpa_supplicant_conf.yml
        vars:
          dest_root_dirs:
            - "{{ desired_partitions['root'].mount_point }}"

      - name: Copy arch-ansible to root
        become: true
        synchronize:
          src: "{{ playbook_dir }}/"
          dest: "{{ ansible_dir }}"

      - name: Add tmux config to root
        become: true
        copy:
          src: files/tmux.conf
          dest: "{{ alarm_home_dir }}/.tmux.conf"

      - name: Create gpg-keys dir
        become: true
        file:
          path: "{{ gpg_keys_dir }}"
          state: directory

      - name: Check for exported GPG private key
        become: true
        stat:
          path: "{{ gpg_keys_dir }}/private-key.asc"
        register: check_exported_gpg_private_key

      - name: Export GPG private key
        command: "gpg --armor --export-secret-key '{{ pass_gpg_key }}'"
        register: gpg_private_export_cmd
        no_log: true
        when: not check_exported_gpg_private_key.stat.exists

      - name: Write gpg private key
        copy:
          dest: "{{ gpg_keys_dir }}/private-key.asc"
          content: "{{ gpg_private_export_cmd.stdout }}"
        become: true
        no_log: true
        when: gpg_private_export_cmd.changed

      - name: Check for exported GPG public key
        become: true
        stat:
          path: "{{ gpg_keys_dir }}/public-key.asc"
        register: check_exported_gpg_public_key

      - name: Export GPG public key
        command: "gpg --armor --export '{{ pass_gpg_key }}'"
        no_log: true
        register: gpg_public_export_cmd
        when: not check_exported_gpg_public_key.stat.exists

      - name: Write GPG public key
        become: true
        no_log: true
        when: gpg_public_export_cmd.changed
        copy:
          dest: "{{ gpg_keys_dir }}/public-key.asc"
          content: "{{ gpg_public_export_cmd.stdout }}"

      - name: Create ssh-keys dir
        become: true
        file:
          path: "{{ ssh_keys_dir }}"
          state: directory
      - name: Copy SSH private key
        become: true
        copy:
          src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
          dest: "{{ ssh_keys_dir }}/id_rsa"
          owner: root
      - name: Copy SSH public key
        become: true
        copy:
          src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
          dest: "{{ ssh_keys_dir }}/id_rsa.pub"

      - name: Install resolvconf.conf
        become: true
        copy:
          src: files/resolvconf.conf
          dest: "{{ desired_partitions['root'].mount_point }}/etc/resolvconf.conf"

      - name: Create systemd-nspawn service file directory
        become: true
        file:
          path: /etc/systemd/nspawn
          state: directory

      - name: Install nspawn config for panamint
        become: true
        copy:
          src: files/panamint.nspawn
          dest: "/etc/systemd/nspawn/panamint.nspawn"

      - name: Ensure root dir permissions
        become: true
        file:
          path: "{{ desired_partitions['root'].mount_point }}"
          owner: root
          group: root

      # Logging into the container intermittently hangs until systemd-homed
      # is removed as an auth mechanism from PAM
      # Arch forum with workaround - https://archlinuxarm.org/forum/viewtopic.php?t=14722
      # Systemd issues - https://github.com/systemd/systemd/issues/18598
      - name: Disable systemd-homed in container
        become: true
        replace:
          path: "{{ desired_partitions['root'].mount_point }}/etc/pam.d/system-auth"
          regexp: '(.*pam_systemd_home.so.*)'
          replace: '#\1'

      - name: Start panamint container
        become: true
        systemd:
          state: started
          name: systemd-nspawn@panamint.service
          daemon-reload: true

      - name: Install mkinitcpio.conf
        become: true
        template:
          src: templates/mkinitcpio.conf.j2
          dest: "{{ desired_partitions['root'].mount_point }}/etc/mkinitcpio.conf"


      - name: Init pacman keys in nspawn container
        command: machinectl shell panamint /bin/bash -c "pacman-key --init"
        ignore_errors: true
        retries: 10
        delay: 2
        register: pacman_key_init_result
        until: pacman_key_init_result.rc == 0

      - name: Populate ARM pacman keys in nspawn container
        command: machinectl shell panamint  /bin/bash -c "pacman-key --populate archlinuxarm"

      - name: Update and install pacakges in nspawn container
        command: machinectl shell panamint  /bin/bash -c "pacman -Suy --noconfirm lvm2 cryptsetup sudo git rsync base base-devel uboot-tools mkinitcpio-utils python ansible"

      # Can't use `uname` since that returns the host kernel version
      - name: Rebuild initramfs in container
        shell: machinectl shell panamint  /bin/bash -c "mkinitcpio -k $(ls /usr/lib/modules | grep ARCH) -g /boot/initramfs-linux.img"

      # Currently using a locally modified version of the machinectl plugin
      # due to https://github.com/tomeon/ansible-connection-machinectl/issues/10
      # - name: Switch connection to machinectl
      #   set_fact:
      #     ansible_connection: machinectl
      # Call playbook with bootstrap tag here
      # - name: Switch connection back to local for cleanup
      #   set_fact:
      #     ansible_connection: local

      - name: Update boot params for crypt root
        become: true
        copy:
          dest: "{{ desired_partitions['root'].mount_point }}/boot/cmdline.txt"
          content: "root={{ desired_partitions['root'].logical_device }} cryptdevice={{ desired_partitions['root'].partition_device }}:{{ desired_partitions['root'].volume_group_name }} rootfstype={{ desired_partitions['root'].fstype }} rw rootwait console=serial0,115200 console=tty1 selinux=0 plymouth.enable=0 smsc95xx.turbo_mode=N dwc_otg.lpm_enable=0 kgdboc=serial0,115200"

      - name: Set hostname in container
        become: true
        copy:
          content: "panamint"
          dest: "{{ desired_partitions['root'].mount_point }}/etc/hostname"

      - name: Add alarm user to sudoers
        become: true
        lineinfile:
          dest: "{{ desired_partitions['root'].mount_point }}/etc/sudoers"
          line: "alarm ALL=(ALL) ALL"
          state: present
          create: yes

      always:
        - name: Switch connection back to local for cleanup
          set_fact:
            ansible_connection: local

        - name: Stop panamint container
          become: true
          command: machinectl kill --signal SIGKILL panamint
          when: not (no_clean is defined and no_clean == "true")
          ignore_errors: true

        - name: Unmount temp boot dir
          become: true
          mount:
            path: "{{ desired_partitions['root'].mount_point }}/boot"
            state: absent
          when: not (no_clean is defined and no_clean == "true")

        - name: Unmount sub-root boot dir
          become: true
          mount:
            path: "{{ desired_partitions['boot'].mount_point }}"
            state: absent
          when: not (no_clean is defined and no_clean == "true")

        - name: Remove temp boot dir mount point
          become: true
          file:
            path: "{{ desired_partitions['boot'].mount_point }}"
            state: absent
          when: not (no_clean is defined and no_clean == "true")

        - name: Unmount temp root dir
          become: true
          mount:
            path: "{{ desired_partitions['root'].mount_point }}"
            state: absent
          when: not (no_clean is defined and no_clean == "true")

        - name: Remove temp root dir mount point
          become: true
          file:
            path: "{{ desired_partitions['root'].mount_point }}"
            state: absent
          when: not (no_clean is defined and no_clean == "true")

        - name: Close LUKS devices
          become: true
          luks_device:
            device: "{{ item.partition_device }}"
            state: "closed"
            name: "{{ item.logical_device | basename }}"
          loop: "{{ desired_partitions | dict_values }}"
          when: item.encrypted and not (no_clean is defined and no_clean == "true")
