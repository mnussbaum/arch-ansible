# vim:ft=yaml.ansible:
---
- hosts: all
  tasks:
    - name: Wipe mount points
      file:
        path: "{{ item.mount_point }}"
        state: absent
      become: true
      when: wipe_card is defined and wipe_card == "true"
      loop: "{{ partitions | dict_values }}"

    - name: Create mount points
      file:
        path: "{{ item.mount_point }}"
        state: directory
      become: true
      loop: "{{ partitions | dict_values }}"

    - assert:
        that: "partitions['boot'].physical_device == partitions['root'].physical_device"
        msg: "Boot and root partitions must be on the same SD card"

    - name: Set facts
      set_fact:
        root_filesystem_download_path: "{{ lookup('env', 'HOME') }}/.cache/ArchLinuxARM-rpi-3-latest.tar.gz"

    - name: Read SD card device info
      parted:
        device: "{{ partitions['root'].physical_device }}"
        unit: MiB
      register: sd_device_info
      become: true

    - name: Remove extra partitions from disk
      parted:
        device: "{{ partitions['root'].physical_device }}"
        number: "{{ item.num }}"
        state: absent
      loop: "{{ sd_device_info.partitions }}"
      when: (item.num > (partitions | length)) or (wipe_card is defined and wipe_card == "true")
      become: true

    - import_tasks: tasks/bootstrapping/create-partitions.yml

    - name: Wipe exising LUKS partitions
      luks_device:
        device: "{{ item.partition_device }}"
        state: "absent"
        name: "{{ item.logical_device | basename }}"
      become: true
      loop: "{{ partitions | dict_values }}"
      when: item.encrypted and (wipe_card is defined and wipe_card == "true")

    - import_tasks: tasks/bootstrapping/luks-format-and-open.yml
      tags: [open]

    - name: Create partition filesystems
      filesystem:
        fstype: "{{ item.fstype }}"
        dev: "{{ item.logical_device }}"
      become: true
      loop: "{{ partitions | dict_values }}"

    - import_tasks: tasks/bootstrapping/mount-partitions.yml
      tags: [open]

    - name: Check for root filesystem download
      stat:
        path: "{{ root_filesystem_download_path }}"
      register: root_filesystem_download_check_result

    - name: Download root filesystem
      get_url:
        url: http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-3-latest.tar.gz
        dest: "{{ root_filesystem_download_path }}"
      when: not root_filesystem_download_check_result.stat.exists

    - name: Extract root filesystem
      unarchive:
        src: "{{ root_filesystem_download_path }}"
        dest: "{{ partitions['root'].mount_point }}"
        creates: "{{ partitions['root'].mount_point}}/etc/os-release"
      become: true

    - name: Check for boot dir on the root partition
      become: true
      stat:
        path: "{{ partitions['root'].mount_point }}/boot"
      register: boot_dir_on_root

    - name: Move boot files to boot partition
      synchronize:
        src: "{{ partitions['root'].mount_point }}/boot/"
        dest: "{{ partitions['boot'].mount_point }}"
      become: true
      when: boot_dir_on_root.stat.exists

    - name: Remove old boot dir files
      become: true
      command:
        cmd: "rm -rf {{ partitions['root'].mount_point }}/boot/*"
        warn: false
      when: boot_dir_on_root.stat.exists

    - name: Unmount boot dir
      mount:
        path: "{{ partitions['boot'].mount_point }}"
        state: absent
      become: true

    - name: Mount boot dir under root dir
      mount:
        path: "{{ partitions['root'].mount_point }}/boot"
        src: "{{ partitions['boot'].partition_device }}"
        state: mounted
        fstype: vfat
      become: true

    # It seems like creating network namespaces fails within the container
    # Many built-in systemd services attempt to create a network NS via the
    # PrivateNetwork directive. These failed units block further bootstrapping,
    # so we override the private network setup. I asked for help at:
    #
    # https://stackoverflow.com/questions/66927027/systemd-services-with-private-networking-fail-when-run-in-nspawn-container
    - name: Create systemd override directories
      become: true
      file:
        path: "{{ partitions['root'].mount_point }}/etc/systemd/system/{{ item }}"
        state: directory
      register: systemd_override_dirs
      loop:
        - systemd-coredump@.service.d
        - e2scrub_reap.service.d
        - systemd-localed.service.d
        - haveged.service.d
        - e2scrub@.service.d
        - systemd-journal-gatewayd.service.d
        - systemd-hostnamed.service.d
        - fstrim.service.d
        - systemd-journal-remote.service.d
        - uuidd.service.d

    - name: Disable systemd units' private networking
      become: true
      copy:
        src: files/private_network_override.conf
        dest: "{{ item.path }}/override.conf"
      loop: "{{ systemd_override_dirs.results }}"

    - name: Create systemd-nspawn service file directory
      become: true
      file:
        path: /etc/systemd/nspawn
        state: directory

    - name: Install nspawn config for panamint
      become: true
      copy:
        src: files/panamint.nspawn
        dest: "/etc/systemd/nspawn/panamint.nspawn"

    - name: Ensure root dir permissions
      become: true
      file:
        path: "{{ partitions['root'].mount_point }}"
        owner: root
        group: root

    # Logging into the container intermittently hangs until systemd-homed
    # is removed as an auth mechanism from PAM
    # Arch forum with workaround - https://archlinuxarm.org/forum/viewtopic.php?t=14722
    # Systemd issues - https://github.com/systemd/systemd/issues/18598
    - name: Disable systemd-homed in container
      become: true
      replace:
        path: "{{ partitions['root'].mount_point }}/etc/pam.d/system-auth"
        regexp: "(.*pam_systemd_home.so.*)"
        replace: '#\1'

    - name: Install mkinitcpio.conf
      become: true
      template:
        src: templates/mkinitcpio.conf.j2
        dest: "{{ partitions['root'].mount_point }}/etc/mkinitcpio.conf"

    - name: Start panamint container
      become: true
      systemd:
        state: started
        name: systemd-nspawn@panamint.service
        daemon-reload: true
      retries: 20
      delay: 4
      tags: [open]

    - name: Init pacman keys in nspawn container
      become: true
      command: machinectl shell panamint /usr/bin/pacman-key --init
      retries: 20
      delay: 4
      register: pacman_key_init_result
      until: pacman_key_init_result.rc == 0

    - name: Populate ARM pacman keys in nspawn container
      become: true
      command: machinectl shell panamint /usr/bin/pacman-key --populate archlinuxarm

    - name: Update and install pacakges in nspawn container
      become: true
      command: machinectl shell panamint /usr/bin/pacman -Syu --noconfirm --overwrite '*.dtbo' lvm2 cryptsetup sudo git rsync base base-devel uboot-tools dropbear mkinitcpio-utils mkinitcpio-netconf mkinitcpio-dropbear python ansible

    # Can't use `uname` since that returns the host kernel version
    - name: Rebuild initramfs in container
      become: true
      command: machinectl shell panamint /bin/bash -c "mkinitcpio -k $(ls /usr/lib/modules | grep ARCH | tail -n 1) -g /boot/initramfs-linux.img"

    - name: Update boot params for crypt root
      become: true
      copy:
        dest: "{{ partitions['root'].mount_point }}/boot/cmdline.txt"
        content: "root={{ partitions['root'].logical_device }} cryptdevice={{ partitions['root'].partition_device }}:{{ partitions['root'].volume_group_name }} rootfstype={{ partitions['root'].fstype }} rw rootwait console=serial0,115200 console=tty1 selinux=0 plymouth.enable=0 smsc95xx.turbo_mode=N dwc_otg.lpm_enable=0 kgdboc=serial0,115200"

    - name: Set hostname in container
      become: true
      copy:
        content: "panamint"
        dest: "{{ partitions['root'].mount_point }}/etc/hostname"
